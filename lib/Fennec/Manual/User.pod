=head1 NAME

Fennec::Manual::User - The user manual for Fennec

=head1 DESCRIPTION

Covers usage of Fennec when writing tests and managing test suites.

=head1 CHAPTER 1 - INTRODUCTION

Fennec works just like traiditional L<Test::Builder> tools in that it allows
you to write script style tests. Fennec takes this a step further by
introducing behavior driven development with the concepts of test groups and
workflows. Fennec also requires that each test file define a class which Fennec
will instantiate.

=head2 CHAPTER 1.1 - ASSERTIONS

Fennec refers to test functions such as ok(), is(), and is_deeply() by the term
'assertion'. Using Fennec automatically gives you all the assertions normally
provided by L<Test::More>, L<Test::Warn>, and L<Test::Exception>. Please see
L<Test::Simple> if you are not already familiar with testing in perl.

sample assertions:

    ok( $true, "name of check" );
    is( $var_a, $var_b, "name of other check" );

Fennec also allows for traditional assertions which die on failure, but only
when tests are grouped. See Chapter 3.2 for more on groups.

    tests my_tests {
        die "check failed" unless $a == $b;
    }

=head2 CHAPTER 1.2 - WRITING A BASIC TEST CLASS

The most simple Fennec test class is a script that declares a package, uses
L<Fennec::Standalone> and makes assertions.

t/my_test.t:

    #!/usr/bin/perl
    package My::Test
    use strict;
    use warnings;
    use Fennec::Standalone;

    ok( 1, "1 is true, perl is not broken" );

    done_testing();

*done_testing() is required at the end of all standalone tests.

=head2 CHAPTER 1.3 - DEFAULT ASSERTIONS

By default, Fennec will provide the following assert functions. See each
referenced package fore more details.

=over 2

=item L<Fennec::Assert::Core::Simple>

=over 2

=item ok( $check, $name )

=back

=item L<Fennec::Assert::Core::More>

=over 2

=item is( $val_a, $val_b, $name )

=item isnt($got, $want; $name)

=item like($got, $want; $name)

=item unlike($got, $want; $name)

=item can_ok(*thing; @list )

=item isa_ok(*thing; @list )

=item is_deeply($got, $want; $name)

=item advanced_is(got => $got, want => $want, name => $name, %options)

=back

=item L<Fennec::Assert::Core::Exception>

=over 2

=item lives_ok { ... } $name

=item dies_ok { ... } $name

=item throws_ok { ... } qr/.../, $name

=item lives_and { ... } $name

=back

=item L<Fennec::Assert::Core::Warn>

=over 2

=item @list = capture_warnings { ... }

=item warning_is { ... } $want, $name

=item warnings_are { ... } \@want, $name

=item warning_like { ... } qr/.../, $name

=item warnings_like { ... } [ qr/.../, ... ], $name

=item warnings_exist { ... } [ $string, $regex, ... ], $name

=back

=item L<Fennec::Assert::Core::Package>

=over 2

=item require_ok Package::Bareword

=item require_ok( $package )

=item use_ok Package::Bareword

=item use_ok( $package, @args )

=item use_into_ok( $package, $dest_package, @args )

=back

=item L<Fennec::Assert::Core::Anonclass>

=over 2

=item $anonclass = anonclass( ... )

=back

=back

=head2 CHAPTER 1.4 - CUSTOM INLINE ASSERTIONS

TODO - http://github.com/exodist/Fennec/issues/#issue/60

=head1 CHAPTER 2 - SUITE MANAGEMENT

There are two ways to manage a test suite with Fennec. The simple way is to
simply write .t files that use L<Fennec::Standalone>. The other way is to turn
control over to the Fennec 'runner' script.

=head2 CHAPTER 2.1 - STANDALONE

Each Fennec test file is independent. Prove iterates the files for you running
them in order. Every test has the overheard of re-loading Fennec and its tools.
Files will not share a common configuration you must manually enter your
configuration into each file.

Using L<Fennec::Standalone> has already been introduced in Chapter 1.2.

=head2 CHAPTER 2.2 - SINGLE RUNNER

Fennec will be configured in t/Fennec.t, which will also serve as a runner. The
runner will find all your test files and run them for you. The benefits of this
system are reduced overhead, shared configuration, and the ability to
potentially pre-load items that are cpu intensive to load.

The downside of a runner system is that it hijacks prove. Runners
have been used in other perl testing frameworks such as L<Test::Class>. Some
people have strong opinions about runners, usually unfavorable ones. Runners
often have the problem that it is difficult to run a single test file.

Fennec has many command-line and editor integration tools that solve the most
commn complaints about runners. See Chapter 2.2.1 and Chapter 5 for more
details.

To generate t/Fennec.t use the fennec_init command. This will create the file
with the default Fennec configuration. This file doubles as a configuration
file. See Chapter 2.3 - Configuration for more details.

=head3 CHAPTER 2.2.1 - COMMAND LINE TOOLS



=head2 CHAPTER 2.3 - CONFIGURATION

=head1 CHAPTER 3 - WORKFLOWS AND GROUPS

=head2 CHAPTER 3.1 - OLD SCHOOL

=head2 CHAPTER 3.2 - SIMPLE TEST GROUPS

=over 4

=item Test Groups

Test groups are tests placed inside a grouping method. Grouping methods are
typically defined using the 'tests' keyword. The 'tests' keyword uses
L<Devel::Declare> to work similar to the 'sub' keyword, that is no semicolon is
required after the defenition. The keyword is further enhanced allowing for
quoted method names.

    tests 'name of group' {
        ok( 1, "name" );
        ...
    }

=item Test Workflows

Workflows are how Fennec implements Behavior Driven Development or BDD. BDD is
a way to structure tests in a more readable or managable way than script style
tests. The most well known example of BDD is Ruby's RSPEC, of which Fennec has
an implementation.

=back

When a Fennec test is run, it will first run all your package level assertions
(ok, is, is_deeply, etc). While doing so it will also build and prepare your
test groups and workflows. Once the building phase is complete, Fennec will
instantiate your test class, and run all groups and workflows on it.

In most cases workflows and groups will be run in random order, and in
parrallel. See the configuration section for details on modifying this
behavior.


=head2 CHAPTER 3.3 - RSPEC

=head2 CHAPTER 3.4 - CASES

=head2 CHAPTER 3.5 - OBJECT METHODS

=head1 CHAPTER 4 - ADVANCED TOPICS

=head2 CHAPTER 4.1 - CUSTOM FILE TYPES

=head2 CHAPTER 4.1 - OUTPUT HANDLERS

=head2 CHAPTER 4.2 - COLLECTORS

=head1 CHAPTER 5 - EDITOR INTEGRATION

=head1 AUTHORS

Chad Granum L<exodist7@gmail.com>

=head1 COPYRIGHT

Copyright (C) 2010 Chad Granum

Fennec is free software; Standard perl licence.

Fennec is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the license for more details.
