---- config
# Basic config options.
title: Modern perl testing with Fennec
indent: 5
height: 34
width: 100
skip: 0
---- center
Modern perl testing with Fennec

by Chad 'Exodist' Granum
---- perl
== Here is a typical Test::Builder based test

== t/MyModule.t
#!/usr/bin/perl

use strict;
use warnings;
use Test::More;

use_ok( 'MyModule' );

# Sanity
can_ok( 'MyModule', qw/a b/ );
isa_ok( 'MyModule', 'OtherModule' );

#Check defaults
my $one = MyModule->new;
is( MyModule->a, 'a', "default for a" );
is( MyModule->b, 'b', "default for b" );

#Set values
my $two = MyModule->new( a => 'A', b => 'B' );
is( MyModule->a, 'A', "construct value a" );
is( MyModule->b, 'B', "construct value b" );

done_testing;

---- perl
== Here is that same test converted to fennec

== t/MyModule.t
#!/usr/bin/perl
package TEST::MyModule;
use strict;
use warnings;
use Fennec::Standalone;

use_ok( 'MyModule' );

# Sanity
can_ok( 'MyModule', qw/a b/ );
isa_ok( 'MyModule', 'OtherModule' );

#Check defaults
my $one = MyModule->new;
is( MyModule->a, 'a', "default for a" );
is( MyModule->b, 'b', "default for b" );

#Set values
my $two = MyModule->new( a => 'A', b => 'B' );
is( MyModule->a, 'A', "construct value a" );
is( MyModule->b, 'B', "construct value b" );

done_testing;

----
== Differences

+ * The test file declares a package

+ * use Fennec instead of use Test::XXX

---- perl
== Here is that same test converted to fennec

== t/MyModule.t
#!/usr/bin/perl
package TEST::MyModule;
use strict;
use warnings;
use Fennec::Standalone;

use_ok( 'MyModule' );

# Sanity
can_ok( 'MyModule', qw/a b/ );
isa_ok( 'MyModule', 'OtherModule' );

#Check defaults
my $one = MyModule->new;
is( MyModule->a, 'a', "default for a" );
is( MyModule->b, 'b', "default for b" );

#Set values
my $two = MyModule->new( a => 'A', b => 'B' );
is( MyModule->a, 'A', "construct value a" );
is( MyModule->b, 'B', "construct value b" );

done_testing;

---- perl
== Here is that same test written the fennec way

== t/MyModule.pm
package TEST::MyModule;
use strict;
use warnings;
use Fennec;

use_ok( 'MyModule' );

tests Sanity => sub {
    my $self = shift;
    can_ok( 'MyModule', qw/a b/ );
    isa_ok( 'MyModule', 'OtherModule' );
};

tests 'Check defaults' => sub {
    my $one = MyModule->new;
    is( MyModule->a, 'a', "default for a" );
    is( MyModule->b, 'b', "default for b" );
};

tests 'Set values' => sub {
    my $one = MyModule->new( a => 'A', b => 'B' );
    is( MyModule->a, 'A', "construct value a" );
    is( MyModule->b, 'B', "construct value b" );
};

1;
----
== differences

+ * The test file is a module (.pm)

+ * The test groups are named and declared seperately

+ * done_testing() is not required

+ * Test groups are methods
  (notice: $self = shift; in the first group)

----
== The End
